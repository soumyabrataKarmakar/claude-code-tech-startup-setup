{
  "name": "Personal Health Assistant - Emergency Detection & Escalation",
  "version": 1,
  "createdAt": "2025-01-27T00:00:00.000Z",
  "updatedAt": "2025-01-27T00:00:00.000Z",
  "active": true,
  "tags": ["healthcare", "emergency", "critical", "911", "escalation"],
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "emergency-escalation",
        "authentication": "headerAuth",
        "options": {
          "rawBody": true,
          "cors": {
            "enabled": true,
            "allowedOrigins": "https://health-assistant.dextechlabs.com"
          },
          "noResponseBody": false
        }
      },
      "id": "emergency-webhook-receiver",
      "name": "Emergency Webhook Receiver",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "const emergencyRequest = $json.body;\nconst emergencyData = emergencyRequest.emergencyData;\nconst patientData = emergencyRequest.patientData;\n\n// Emergency classification system\nconst emergencyClassification = {\n  level: 'pending',\n  category: 'unknown',\n  confidence: 0,\n  triggers: [],\n  requiredActions: [],\n  timeToResponse: 999,\n  riskFactors: []\n};\n\n// Critical symptom keywords (immediate 911)\nconst criticalSymptoms = {\n  cardiac: ['chest pain', 'heart attack', 'cardiac arrest', 'crushing chest pain'],\n  respiratory: ['can\\'t breathe', 'choking', 'stopped breathing', 'blue lips'],\n  neurological: ['stroke', 'unconscious', 'seizure', 'paralysis', 'severe headache'],\n  trauma: ['severe bleeding', 'major trauma', 'broken bones', 'head injury'],\n  mental: ['suicidal', 'self harm', 'overdose', 'violent'],\n  allergic: ['anaphylaxis', 'severe allergic reaction', 'swelling throat']\n};\n\n// Critical vital sign thresholds\nconst criticalVitals = {\n  heartRate: { critical: hr => hr < 40 || hr > 150, urgent: hr => hr < 50 || hr > 120 },\n  systolicBP: { critical: sbp => sbp > 220 || sbp < 80, urgent: sbp => sbp > 180 || sbp < 90 },\n  temperature: { critical: temp => temp > 105 || temp < 95, urgent: temp => temp > 103 || temp < 96 },\n  oxygenSaturation: { critical: sat => sat < 85, urgent: sat => sat < 92 },\n  consciousness: { critical: level => level === 'unconscious', urgent: level => level === 'confused' }\n};\n\n// Check for critical symptoms\nconst symptoms = emergencyData.primarySymptoms.join(' ').toLowerCase();\nfor (const [category, keywords] of Object.entries(criticalSymptoms)) {\n  for (const keyword of keywords) {\n    if (symptoms.includes(keyword)) {\n      emergencyClassification.level = 'critical';\n      emergencyClassification.category = category;\n      emergencyClassification.confidence += 30;\n      emergencyClassification.triggers.push(`Critical ${category} symptom: ${keyword}`);\n      emergencyClassification.timeToResponse = 30; // 30 seconds\n      emergencyClassification.requiredActions.push('IMMEDIATE_911_CALL');\n    }\n  }\n}\n\n// Check vital signs for critical values\nif (emergencyData.vitalSigns) {\n  const vitals = emergencyData.vitalSigns;\n  \n  for (const [vital, value] of Object.entries(vitals)) {\n    if (criticalVitals[vital]?.critical && criticalVitals[vital].critical(value)) {\n      emergencyClassification.level = 'critical';\n      emergencyClassification.confidence += 25;\n      emergencyClassification.triggers.push(`Critical vital sign: ${vital} = ${value}`);\n      emergencyClassification.timeToResponse = Math.min(emergencyClassification.timeToResponse, 30);\n      emergencyClassification.requiredActions.push('IMMEDIATE_911_CALL');\n    } else if (criticalVitals[vital]?.urgent && criticalVitals[vital].urgent(value)) {\n      if (emergencyClassification.level !== 'critical') {\n        emergencyClassification.level = 'urgent';\n      }\n      emergencyClassification.confidence += 15;\n      emergencyClassification.triggers.push(`Urgent vital sign: ${vital} = ${value}`);\n      emergencyClassification.timeToResponse = Math.min(emergencyClassification.timeToResponse, 120);\n      emergencyClassification.requiredActions.push('URGENT_MEDICAL_ATTENTION');\n    }\n  }\n}\n\n// Check severity score\nif (emergencyData.severity >= 9) {\n  emergencyClassification.level = emergencyClassification.level || 'urgent';\n  emergencyClassification.confidence += 20;\n  emergencyClassification.triggers.push(`Extreme severity score: ${emergencyData.severity}`);\n  emergencyClassification.timeToResponse = Math.min(emergencyClassification.timeToResponse, 60);\n}\n\n// Age-based risk factors\nconst age = patientData.demographics?.age;\nif (age) {\n  if (age < 2) {\n    emergencyClassification.riskFactors.push('Pediatric patient (<2 years) - high risk');\n    emergencyClassification.confidence += 10;\n  } else if (age > 75) {\n    emergencyClassification.riskFactors.push('Elderly patient (>75 years) - increased risk');\n    emergencyClassification.confidence += 5;\n  }\n}\n\n// Medical history risk factors\nif (patientData.medicalHistory?.conditions) {\n  const highRiskConditions = ['heart disease', 'diabetes', 'copd', 'kidney disease', 'cancer'];\n  const conditions = patientData.medicalHistory.conditions.join(' ').toLowerCase();\n  \n  for (const condition of highRiskConditions) {\n    if (conditions.includes(condition)) {\n      emergencyClassification.riskFactors.push(`High-risk condition: ${condition}`);\n      emergencyClassification.confidence += 5;\n    }\n  }\n}\n\n// Symptom progression analysis\nif (emergencyData.progression === 'rapid') {\n  emergencyClassification.riskFactors.push('Rapid symptom progression');\n  emergencyClassification.confidence += 15;\n  emergencyClassification.timeToResponse = Math.min(emergencyClassification.timeToResponse, 60);\n}\n\n// Final classification\nif (emergencyClassification.confidence >= 50 && emergencyClassification.level !== 'critical') {\n  emergencyClassification.level = 'urgent';\n}\n\nif (emergencyClassification.level === 'pending' && emergencyClassification.confidence >= 30) {\n  emergencyClassification.level = 'urgent';\n}\n\nreturn {\n  ...emergencyRequest,\n  analysis: emergencyClassification,\n  analysisTimestamp: new Date().toISOString(),\n  responseDeadline: new Date(Date.now() + (emergencyClassification.timeToResponse * 1000)).toISOString()\n};"
      },
      "id": "immediate-symptom-analysis",
      "name": "Immediate Symptom Analysis",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "server": "sequential-thinking",
        "tool": "sequentialthinking",
        "toolInput": {
          "thought": "EMERGENCY ANALYSIS: Patient presenting with {{ $json.emergencyData.primarySymptoms.join(', ') }}. Classification level: {{ $json.analysis.level }}. Confidence: {{ $json.analysis.confidence }}%. Triggers: {{ $json.analysis.triggers.join('; ') }}. Age: {{ $json.patientData.demographics?.age || 'unknown' }}. Need to rapidly assess if this requires immediate emergency response, urgent care, or if escalation can be avoided. Time is critical.",
          "thoughtNumber": 1,
          "totalThoughts": 3,
          "nextThoughtNeeded": true
        }
      },
      "id": "emergency-classification-engine",
      "name": "Sequential Thinking - Emergency Classification",
      "type": "n8n-nodes-langchain.toolMcp",
      "typeVersion": 1,
      "position": [680, 300]
    },
    {
      "parameters": {
        "server": "memory",
        "tool": "search_nodes",
        "toolInput": {
          "query": "{{ $json.patientId }} emergency history risk factors previous incidents"
        }
      },
      "id": "patient-risk-profile",
      "name": "Memory MCP - Patient Risk Profile",
      "type": "n8n-nodes-langchain.toolMcp",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "const emergencyData = $json;\nconst analysis = emergencyData.analysis;\nconst clinicalReasoning = $json.sequentialThinking || {};\nconst patientHistory = $json.patientRiskProfile || {};\n\nconst validation = {\n  confirmed: false,\n  finalClassification: analysis.level,\n  confidenceScore: analysis.confidence,\n  validationFlags: [],\n  recommendedActions: [],\n  escalationRequired: false,\n  responseTimeframe: analysis.timeToResponse\n};\n\n// Validation criteria for emergency confirmation\nconst confirmationThresholds = {\n  critical: { minConfidence: 70, requiredTriggers: 1 },\n  urgent: { minConfidence: 50, requiredTriggers: 1 },\n  routine: { minConfidence: 30, requiredTriggers: 0 }\n};\n\n// Check against confirmation thresholds\nconst threshold = confirmationThresholds[analysis.level];\nif (analysis.confidence >= threshold.minConfidence && analysis.triggers.length >= threshold.requiredTriggers) {\n  validation.confirmed = true;\n  validation.escalationRequired = analysis.level === 'critical' || analysis.level === 'urgent';\n}\n\n// Cross-reference with patient history\nif (patientHistory.results && patientHistory.results.length > 0) {\n  const historyText = patientHistory.results.map(item => item.text).join(' ').toLowerCase();\n  \n  if (historyText.includes('previous emergency') || historyText.includes('frequent er visits')) {\n    validation.validationFlags.push('Patient has history of emergency episodes');\n    validation.confidenceScore += 5;\n  }\n  \n  if (historyText.includes('false alarm') || historyText.includes('anxiety related')) {\n    validation.validationFlags.push('Previous false emergency alerts in history');\n    validation.confidenceScore -= 10;\n  }\n}\n\n// Generate recommended actions based on final classification\nswitch (validation.finalClassification) {\n  case 'critical':\n    validation.recommendedActions = [\n      'IMMEDIATE_911_EMERGENCY_CALL',\n      'NOTIFY_EMERGENCY_CONTACTS',\n      'ALERT_PRIMARY_PROVIDER',\n      'PREPARE_EMERGENCY_INFORMATION_PACKET',\n      'CONTINUOUS_MONITORING'\n    ];\n    validation.responseTimeframe = 30;\n    break;\n    \n  case 'urgent':\n    validation.recommendedActions = [\n      'URGENT_MEDICAL_CONSULTATION',\n      'NOTIFY_EMERGENCY_CONTACTS',\n      'ARRANGE_IMMEDIATE_TRANSPORT',\n      'PREPARE_MEDICAL_SUMMARY',\n      'MONITOR_SYMPTOM_PROGRESSION'\n    ];\n    validation.responseTimeframe = 120;\n    break;\n    \n  default:\n    validation.recommendedActions = [\n      'ENHANCED_MONITORING',\n      'PROVIDER_NOTIFICATION',\n      'FOLLOW_UP_ASSESSMENT'\n    ];\n    validation.responseTimeframe = 300;\n}\n\n// Override for high-risk patients\nconst age = emergencyData.patientData.demographics?.age;\nif (age && (age < 5 || age > 80) && validation.finalClassification === 'urgent') {\n  validation.validationFlags.push('High-risk age group - escalating to critical');\n  validation.finalClassification = 'critical';\n  validation.escalationRequired = true;\n  validation.responseTimeframe = 30;\n}\n\nreturn {\n  ...emergencyData,\n  validation,\n  finalTimestamp: new Date().toISOString(),\n  emergencyConfirmed: validation.confirmed && validation.escalationRequired\n};"
      },
      "id": "emergency-validation",
      "name": "Emergency Validation & Confirmation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "mode": "expression",
        "output": "={{ $json.validation.finalClassification }}",
        "rules": {
          "critical": 0,
          "urgent": 1,
          "routine": 2
        }
      },
      "id": "alert-router",
      "name": "Multi-Channel Alert Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://emergency-services-api.local/alert",
        "authentication": "genericCredentialType",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "alertType",
              "value": "MEDICAL_EMERGENCY"
            },
            {
              "name": "patientId",
              "value": "={{ $json.patientId }}"
            },
            {
              "name": "location",
              "value": "={{ JSON.stringify($json.patientData.currentLocation) }}"
            },
            {
              "name": "emergencyDetails",
              "value": "={{ JSON.stringify({ symptoms: $json.emergencyData.primarySymptoms.join(', '), severity: $json.emergencyData.severity, vitalSigns: $json.emergencyData.vitalSigns }) }}"
            },
            {
              "name": "patientInfo",
              "value": "={{ JSON.stringify({ age: $json.patientData.demographics.age, gender: $json.patientData.demographics.gender, conditions: $json.patientData.medicalHistory.conditions.join(', '), medications: $json.patientData.medicalHistory.medications.join(', '), allergies: $json.patientData.medicalHistory.allergies.join(', ') }) }}"
            },
            {
              "name": "confidence",
              "value": "={{ $json.validation.confidenceScore }}"
            }
          ]
        }
      },
      "id": "critical-911-alert",
      "name": "Critical Emergency - 911 Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 180],
      "credentials": {
        "genericCredentialType": {
          "id": "emergency-services-api",
          "name": "Emergency Services API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://sms-service.dextechlabs.com/send",
        "authentication": "genericCredentialType",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "to",
              "value": "={{ $json.contacts.emergencyContact.phone }}"
            },
            {
              "name": "message",
              "value": "EMERGENCY ALERT: {{ $json.contacts.emergencyContact.name }}, {{ $json.patientData.demographics.age }} year old {{ $json.patientData.demographics.gender }} is experiencing a medical emergency: {{ $json.emergencyData.primarySymptoms.join(', ') }}. Location: {{ $json.patientData.currentLocation.address }}. Emergency services have been notified. Please respond immediately."
            },
            {
              "name": "priority",
              "value": "HIGH"
            },
            {
              "name": "sender",
              "value": "HealthAssistant"
            }
          ]
        }
      },
      "id": "emergency-contact-sms",
      "name": "Emergency Contact SMS Alert",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 300],
      "credentials": {
        "genericCredentialType": {
          "id": "sms-service-api",
          "name": "SMS Service API"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://provider-notification.dextechlabs.com/alert",
        "authentication": "genericCredentialType",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "providerId",
              "value": "={{ $json.contacts.primaryProvider.practice }}"
            },
            {
              "name": "patientId",
              "value": "={{ $json.patientId }}"
            },
            {
              "name": "alertType",
              "value": "EMERGENCY_NOTIFICATION"
            },
            {
              "name": "urgencyLevel",
              "value": "={{ $json.validation.finalClassification }}"
            },
            {
              "name": "clinicalSummary",
              "value": "={{ JSON.stringify({ chiefComplaint: $json.emergencyData.primarySymptoms.join(', '), onset: $json.emergencyData.onsetTime, severity: $json.emergencyData.severity, vitalSigns: $json.emergencyData.vitalSigns, triggers: $json.analysis.triggers.join('; ') }) }}"
            },
            {
              "name": "actionsTaken",
              "value": "={{ $json.validation.recommendedActions.join(', ') }}"
            }
          ]
        }
      },
      "id": "provider-notification",
      "name": "Healthcare Provider Notification",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 420],
      "credentials": {
        "genericCredentialType": {
          "id": "provider-notification-api",
          "name": "Provider Notification API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const emergencyData = $json;\n\nconst statusMonitoring = {\n  emergencyId: emergencyData.emergencyId,\n  patientId: emergencyData.patientId,\n  status: 'ACTIVE',\n  classification: emergencyData.validation.finalClassification,\n  initiatedAt: emergencyData.finalTimestamp,\n  \n  alerts: {\n    emergencyServices: {\n      triggered: emergencyData.validation.finalClassification === 'critical',\n      timestamp: emergencyData.validation.finalClassification === 'critical' ? new Date().toISOString() : null,\n      status: 'PENDING_CONFIRMATION'\n    },\n    emergencyContact: {\n      triggered: true,\n      timestamp: new Date().toISOString(),\n      phone: emergencyData.contacts.emergencyContact.phone,\n      status: 'SMS_SENT'\n    },\n    primaryProvider: {\n      triggered: true,\n      timestamp: new Date().toISOString(),\n      provider: emergencyData.contacts.primaryProvider.name,\n      status: 'NOTIFICATION_SENT'\n    }\n  },\n  \n  monitoring: {\n    responseDeadline: emergencyData.responseDeadline,\n    checkpoints: [\n      { time: 30, action: 'Verify emergency services response', completed: false },\n      { time: 120, action: 'Confirm patient status update', completed: false },\n      { time: 300, action: 'Follow-up with healthcare provider', completed: false }\n    ],\n    autoEscalation: {\n      enabled: true,\n      nextCheck: new Date(Date.now() + 30000).toISOString() // 30 seconds\n    }\n  },\n  \n  clinicalSnapshot: {\n    symptoms: emergencyData.emergencyData.primarySymptoms,\n    severity: emergencyData.emergencyData.severity,\n    vitalSigns: emergencyData.emergencyData.vitalSigns,\n    riskFactors: emergencyData.analysis.riskFactors,\n    confidence: emergencyData.validation.confidenceScore\n  }\n};\n\nreturn {\n  ...emergencyData,\n  statusMonitoring,\n  emergencyActive: true\n};"
      },
      "id": "status-monitoring",
      "name": "Real-Time Status Monitoring",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "server": "memory",
        "tool": "create_entities",
        "toolInput": {
          "entities": [
            {
              "name": "{{ $json.patientId }}_emergency_{{ $json.emergencyId }}",
              "entityType": "emergency_event",
              "observations": [
                "Emergency ID: {{ $json.emergencyId }}",
                "Classification: {{ $json.validation.finalClassification }}",
                "Primary symptoms: {{ $json.emergencyData.primarySymptoms.join(', ') }}",
                "Severity score: {{ $json.emergencyData.severity }}",
                "Confidence score: {{ $json.validation.confidenceScore }}%",
                "Triggers: {{ $json.analysis.triggers.join('; ') }}",
                "Actions taken: {{ $json.validation.recommendedActions.join(', ') }}",
                "Emergency services: {{ $json.statusMonitoring.alerts.emergencyServices.triggered ? 'YES' : 'NO' }}",
                "Event timestamp: {{ $json.finalTimestamp }}",
                "Response deadline: {{ $json.responseDeadline }}"
              ]
            }
          ]
        }
      },
      "id": "emergency-documentation",
      "name": "Memory MCP - Emergency Documentation",
      "type": "n8n-nodes-langchain.toolMcp",
      "typeVersion": 1,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": true,\n  \"emergencyId\": \"{{ $json.emergencyId }}\",\n  \"patientId\": \"{{ $json.patientId }}\",\n  \"emergencyProcessed\": true,\n  \"classification\": \"{{ $json.validation.finalClassification }}\",\n  \"escalationRequired\": {{ $json.emergencyConfirmed }},\n  \"responseTime\": \"{{ $json.validation.responseTimeframe }} seconds\",\n  \"actionsTaken\": {{ JSON.stringify($json.validation.recommendedActions) }},\n  \"monitoring\": {\n    \"active\": true,\n    \"nextCheck\": \"{{ $json.statusMonitoring.monitoring.autoEscalation.nextCheck }}\",\n    \"checkpoints\": {{ JSON.stringify($json.statusMonitoring.monitoring.checkpoints) }}\n  },\n  \"contacts\": {\n    \"emergencyServicesNotified\": {{ $json.statusMonitoring.alerts.emergencyServices.triggered }},\n    \"emergencyContactAlerted\": {{ $json.statusMonitoring.alerts.emergencyContact.triggered }},\n    \"providerNotified\": {{ $json.statusMonitoring.alerts.primaryProvider.triggered }}\n  },\n  \"timestamp\": \"{{ $json.finalTimestamp }}\"\n}",
        "responseCode": 200
      },
      "id": "emergency-response",
      "name": "Emergency Response",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [2220, 300]
    }
  ],
  "connections": {
    "Emergency Webhook Receiver": {
      "main": [
        [
          {
            "node": "Immediate Symptom Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Immediate Symptom Analysis": {
      "main": [
        [
          {
            "node": "Sequential Thinking - Emergency Classification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sequential Thinking - Emergency Classification": {
      "main": [
        [
          {
            "node": "Memory MCP - Patient Risk Profile",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory MCP - Patient Risk Profile": {
      "main": [
        [
          {
            "node": "Emergency Validation & Confirmation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Emergency Validation & Confirmation": {
      "main": [
        [
          {
            "node": "Multi-Channel Alert Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Multi-Channel Alert Router": {
      "main": [
        [
          {
            "node": "Critical Emergency - 911 Alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "Emergency Contact SMS Alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "Healthcare Provider Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Emergency Contact SMS Alert",
            "type": "main",
            "index": 0
          },
          {
            "node": "Healthcare Provider Notification",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Healthcare Provider Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Critical Emergency - 911 Alert": {
      "main": [
        [
          {
            "node": "Real-Time Status Monitoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Emergency Contact SMS Alert": {
      "main": [
        [
          {
            "node": "Real-Time Status Monitoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Healthcare Provider Notification": {
      "main": [
        [
          {
            "node": "Real-Time Status Monitoring",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Real-Time Status Monitoring": {
      "main": [
        [
          {
            "node": "Memory MCP - Emergency Documentation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory MCP - Emergency Documentation": {
      "main": [
        [
          {
            "node": "Emergency Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "error-handling-workflow"
  },
  "staticData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "healthcare-assistant-production"
  },
  "pinData": {},
  "versionId": "emergency-escalation-v1.0.0"
}