{
  "name": "Personal Health Assistant - Patient Intake",
  "version": 1,
  "createdAt": "2025-01-27T00:00:00.000Z",
  "updatedAt": "2025-01-27T00:00:00.000Z",
  "active": true,
  "tags": ["healthcare", "patient-intake", "mcp-integration"],
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "patient-intake",
        "authentication": "headerAuth",
        "options": {
          "rawBody": true,
          "cors": {
            "enabled": true,
            "allowedOrigins": "https://health-assistant.dextechlabs.com"
          }
        }
      },
      "id": "webhook-patient-intake",
      "name": "Patient Intake Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "const inputData = $json.body;\n\n// Validation schema\nconst requiredFields = ['patientId', 'sessionId', 'chiefComplaint'];\nconst validation = {\n  isValid: true,\n  errors: [],\n  sanitizedData: {}\n};\n\n// Check required fields\nfor (const field of requiredFields) {\n  if (!inputData[field]) {\n    validation.isValid = false;\n    validation.errors.push(`Missing required field: ${field}`);\n  }\n}\n\n// Sanitize text inputs\nif (inputData.chiefComplaint) {\n  validation.sanitizedData.chiefComplaint = inputData.chiefComplaint\n    .trim()\n    .substring(0, 1000)\n    .replace(/[<>]/g, '');\n}\n\n// Validate severity score\nif (inputData.symptoms?.severity) {\n  const severity = parseInt(inputData.symptoms.severity);\n  if (severity < 1 || severity > 10) {\n    validation.errors.push('Severity must be between 1 and 10');\n  } else {\n    validation.sanitizedData.severity = severity;\n  }\n}\n\n// Validate age\nif (inputData.demographics?.age) {\n  const age = parseInt(inputData.demographics.age);\n  if (age < 0 || age > 150) {\n    validation.errors.push('Invalid age provided');\n  } else {\n    validation.sanitizedData.age = age;\n  }\n}\n\nreturn {\n  validation,\n  inputData: validation.isValid ? { ...inputData, ...validation.sanitizedData } : null,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "input-validation",
      "name": "Input Validation & Sanitization",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "validation-check",
              "leftValue": "={{ $json.validation.isValid }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "validation-check",
      "name": "Validation Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://auth.dextechlabs.com/verify-patient",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "patientId",
              "value": "={{ $json.inputData.patientId }}"
            },
            {
              "name": "sessionId", 
              "value": "={{ $json.inputData.sessionId }}"
            }
          ]
        }
      },
      "id": "patient-auth",
      "name": "Patient Authentication",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [900, 180],
      "credentials": {
        "httpHeaderAuth": {
          "id": "auth-service-api-key",
          "name": "Auth Service API Key"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const patientData = $json.inputData;\nconst emergencyKeywords = [\n  'chest pain', 'can\\'t breathe', 'unconscious', 'bleeding heavily',\n  'severe pain', 'suicidal', 'overdose', 'allergic reaction',\n  'stroke symptoms', 'heart attack', 'choking', 'severe burns'\n];\n\nconst emergencyVitals = {\n  temperature: { critical: temp => temp > 104 || temp < 95 },\n  heartRate: { critical: hr => hr > 120 || hr < 50 },\n  systolicBP: { critical: sbp => sbp > 180 || sbp < 90 },\n  respiratoryRate: { critical: rr => rr > 30 || rr < 8 }\n};\n\nlet emergencyFlags = {\n  isEmergency: false,\n  urgencyLevel: 'routine',\n  triggers: [],\n  recommendedAction: 'continue_assessment'\n};\n\n// Check chief complaint for emergency keywords\nconst complaint = patientData.chiefComplaint?.toLowerCase() || '';\nfor (const keyword of emergencyKeywords) {\n  if (complaint.includes(keyword)) {\n    emergencyFlags.isEmergency = true;\n    emergencyFlags.urgencyLevel = 'emergency';\n    emergencyFlags.triggers.push(`Emergency keyword: ${keyword}`);\n    emergencyFlags.recommendedAction = 'immediate_escalation';\n  }\n}\n\n// Check severity score\nif (patientData.symptoms?.severity >= 8) {\n  emergencyFlags.urgencyLevel = emergencyFlags.urgencyLevel === 'routine' ? 'urgent' : emergencyFlags.urgencyLevel;\n  emergencyFlags.triggers.push(`High severity score: ${patientData.symptoms.severity}`);\n}\n\n// Check vital signs if provided\nif (patientData.vitals) {\n  for (const [vital, value] of Object.entries(patientData.vitals)) {\n    if (emergencyVitals[vital]?.critical(value)) {\n      emergencyFlags.isEmergency = true;\n      emergencyFlags.urgencyLevel = 'emergency';\n      emergencyFlags.triggers.push(`Critical vital sign: ${vital} = ${value}`);\n      emergencyFlags.recommendedAction = 'immediate_escalation';\n    }\n  }\n}\n\nreturn {\n  ...patientData,\n  emergencyAssessment: emergencyFlags,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "emergency-screening",
      "name": "Emergency Screening",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 180]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "emergency-check",
              "leftValue": "={{ $json.emergencyAssessment.isEmergency }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "emergency-check",
      "name": "Emergency Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [1340, 180]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://n8n.dextechlabs.com/webhook/emergency-escalation",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "patientId",
              "value": "={{ $json.patientId }}"
            },
            {
              "name": "emergencyData",
              "value": "={{ JSON.stringify($json.emergencyAssessment) }}"
            },
            {
              "name": "patientData",
              "value": "={{ JSON.stringify($json) }}"
            }
          ]
        }
      },
      "id": "trigger-emergency-workflow",
      "name": "Trigger Emergency Workflow",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [1560, 80]
    },
    {
      "parameters": {
        "server": "memory",
        "tool": "search_nodes",
        "toolInput": {
          "query": "={{ $json.patientId }}"
        }
      },
      "id": "memory-history-retrieval",
      "name": "Memory MCP - History Retrieval",
      "type": "n8n-nodes-langchain.toolMcp",
      "typeVersion": 1,
      "position": [1560, 280]
    },
    {
      "parameters": {
        "server": "sequential-thinking",
        "tool": "sequentialthinking",
        "toolInput": {
          "thought": "Analyzing patient presentation: Chief complaint is '{{ $json.chiefComplaint }}' with severity {{ $json.symptoms?.severity || 'not specified' }}. Patient is {{ $json.demographics?.age || 'age unknown' }} years old. Need to consider differential diagnosis, red flags, and appropriate triage level.",
          "thoughtNumber": 1,
          "totalThoughts": 5,
          "nextThoughtNeeded": true
        }
      },
      "id": "sequential-thinking-assessment",
      "name": "Sequential Thinking - Clinical Reasoning",
      "type": "n8n-nodes-langchain.toolMcp",
      "typeVersion": 1,
      "position": [1780, 280]
    },
    {
      "parameters": {
        "server": "biomcp",
        "tool": "search",
        "toolInput": {
          "query": "symptoms: {{ $json.chiefComplaint }}",
          "domain": "article",
          "page_size": 10,
          "call_benefit": "Analyzing patient symptoms for evidence-based triage and care recommendations"
        }
      },
      "id": "biomcp-symptom-analysis",
      "name": "BioMCP - Symptom Analysis",
      "type": "n8n-nodes-langchain.toolMcp",
      "typeVersion": 1,
      "position": [2000, 280]
    },
    {
      "parameters": {
        "jsCode": "const patientData = $json;\nconst emergencyAssessment = patientData.emergencyAssessment;\n\n// Calculate risk score (0-100)\nlet riskScore = 0;\nlet riskFactors = [];\n\n// Age-based risk\nif (patientData.demographics?.age) {\n  if (patientData.demographics.age > 65) {\n    riskScore += 15;\n    riskFactors.push('Advanced age (>65)');\n  } else if (patientData.demographics.age < 2) {\n    riskScore += 20;\n    riskFactors.push('Pediatric patient (<2 years)');\n  }\n}\n\n// Severity-based risk\nif (patientData.symptoms?.severity) {\n  riskScore += patientData.symptoms.severity * 5;\n  if (patientData.symptoms.severity >= 7) {\n    riskFactors.push(`High pain/severity score: ${patientData.symptoms.severity}`);\n  }\n}\n\n// Emergency flags\nif (emergencyAssessment.isEmergency) {\n  riskScore += 40;\n  riskFactors.push('Emergency condition identified');\n}\n\n// Vital sign abnormalities\nif (patientData.vitals) {\n  let vitalAbnormalities = 0;\n  if (patientData.vitals.temperature > 101.3 || patientData.vitals.temperature < 96.8) {\n    vitalAbnormalities++;\n    riskFactors.push('Abnormal temperature');\n  }\n  if (patientData.vitals.heartRate > 100 || patientData.vitals.heartRate < 60) {\n    vitalAbnormalities++;\n    riskFactors.push('Abnormal heart rate');\n  }\n  riskScore += vitalAbnormalities * 10;\n}\n\n// Determine care pathway\nlet carePathway = 'self-care';\nlet recommendedTimeframe = '1-2 weeks';\nlet providerType = 'primary-care';\n\nif (riskScore >= 70 || emergencyAssessment.isEmergency) {\n  carePathway = 'emergency';\n  recommendedTimeframe = 'immediately';\n  providerType = 'emergency-department';\n} else if (riskScore >= 40) {\n  carePathway = 'urgent';\n  recommendedTimeframe = 'within 24 hours';\n  providerType = 'urgent-care';\n} else if (riskScore >= 20) {\n  carePathway = 'routine';\n  recommendedTimeframe = 'within 1-3 days';\n  providerType = 'primary-care';\n}\n\nreturn {\n  ...patientData,\n  riskAssessment: {\n    riskScore,\n    riskFactors,\n    carePathway,\n    recommendedTimeframe,\n    providerType,\n    assessmentDate: new Date().toISOString()\n  },\n  clinicalSummary: {\n    chiefComplaint: patientData.chiefComplaint,\n    urgencyLevel: emergencyAssessment.urgencyLevel,\n    recommendedAction: carePathway,\n    keyFindings: riskFactors\n  }\n};"
      },
      "id": "risk-stratification",
      "name": "Risk Stratification",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2220, 280]
    },
    {
      "parameters": {
        "jsCode": "const assessment = $json.riskAssessment;\nconst patientData = $json;\nconst emergencyFlags = $json.emergencyAssessment;\n\nlet response = {\n  success: true,\n  patientId: patientData.patientId,\n  sessionId: patientData.sessionId,\n  assessmentComplete: true,\n  assessment: {\n    urgencyLevel: assessment.carePathway,\n    riskScore: assessment.riskScore,\n    timeframe: assessment.recommendedTimeframe\n  },\n  recommendations: [],\n  nextSteps: [],\n  emergencyInstructions: null,\n  disclaimers: [\n    \"This assessment is for informational purposes only and does not replace professional medical advice.\",\n    \"If you are experiencing a medical emergency, call 911 immediately.\",\n    \"Please consult with a healthcare provider for proper medical evaluation and treatment.\"\n  ]\n};\n\n// Generate care recommendations based on pathway\nswitch (assessment.carePathway) {\n  case 'emergency':\n    response.recommendations = [\n      \"Seek immediate emergency medical attention\",\n      \"Call 911 or go to the nearest emergency department\",\n      \"Do not drive yourself - call emergency services or have someone drive you\"\n    ];\n    response.emergencyInstructions = {\n      callEmergency: true,\n      findNearestER: true,\n      doNotDelay: true\n    };\n    break;\n    \n  case 'urgent':\n    response.recommendations = [\n      \"Seek medical attention within 24 hours\",\n      \"Contact your primary care provider or urgent care center\",\n      \"Monitor symptoms and seek emergency care if they worsen\"\n    ];\n    response.nextSteps = [\n      \"Schedule appointment with healthcare provider\",\n      \"Monitor symptoms closely\",\n      \"Prepare list of current medications and allergies\"\n    ];\n    break;\n    \n  case 'routine':\n    response.recommendations = [\n      \"Schedule routine appointment with your healthcare provider\",\n      \"Continue monitoring your symptoms\",\n      \"Consider appropriate self-care measures\"\n    ];\n    response.nextSteps = [\n      \"Schedule non-urgent medical appointment\",\n      \"Track symptoms in health diary\",\n      \"Follow up in 1-2 weeks if symptoms persist\"\n    ];\n    break;\n    \n  case 'self-care':\n    response.recommendations = [\n      \"Your symptoms appear manageable with self-care\",\n      \"Monitor symptoms and seek care if they worsen\",\n      \"Consider over-the-counter remedies if appropriate\"\n    ];\n    response.nextSteps = [\n      \"Continue self-monitoring\",\n      \"Schedule routine check-up if due\",\n      \"Contact healthcare provider if symptoms change\"\n    ];\n    break;\n}\n\n// Add specific instructions based on symptoms\nif (patientData.symptoms?.severity >= 7) {\n  response.nextSteps.unshift(\"Pain management consultation may be beneficial\");\n}\n\nreturn response;"
      },
      "id": "response-generation",
      "name": "Response Generation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2440, 280]
    },
    {
      "parameters": {
        "server": "memory",
        "tool": "create_entities",
        "toolInput": {
          "entities": [
            {
              "name": "={{ $json.patientId }}_assessment_{{ $json.sessionId }}",
              "entityType": "clinical_assessment",
              "observations": [
                "Chief complaint: {{ $json.chiefComplaint }}",
                "Risk score: {{ $json.riskAssessment.riskScore }}",
                "Care pathway: {{ $json.riskAssessment.carePathway }}",
                "Assessment date: {{ $json.riskAssessment.assessmentDate }}",
                "Recommended timeframe: {{ $json.riskAssessment.recommendedTimeframe }}"
              ]
            }
          ]
        }
      },
      "id": "memory-session-storage",
      "name": "Memory MCP - Session Storage",
      "type": "n8n-nodes-langchain.toolMcp",
      "typeVersion": 1,
      "position": [2660, 280]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ JSON.stringify($json, null, 2) }}"
      },
      "id": "final-response",
      "name": "Final Response",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [2880, 280]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"error\": \"Validation failed\",\n  \"details\": {{ JSON.stringify($json.validation.errors) }},\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}",
        "responseCode": 400
      },
      "id": "validation-error-response",
      "name": "Validation Error Response",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [680, 480]
    }
  ],
  "connections": {
    "Patient Intake Webhook": {
      "main": [
        [
          {
            "node": "Input Validation & Sanitization",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Input Validation & Sanitization": {
      "main": [
        [
          {
            "node": "Validation Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation Check": {
      "main": [
        [
          {
            "node": "Patient Authentication",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Validation Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Patient Authentication": {
      "main": [
        [
          {
            "node": "Emergency Screening",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Emergency Screening": {
      "main": [
        [
          {
            "node": "Emergency Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Emergency Check": {
      "main": [
        [
          {
            "node": "Trigger Emergency Workflow",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Memory MCP - History Retrieval",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory MCP - History Retrieval": {
      "main": [
        [
          {
            "node": "Sequential Thinking - Clinical Reasoning",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sequential Thinking - Clinical Reasoning": {
      "main": [
        [
          {
            "node": "BioMCP - Symptom Analysis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "BioMCP - Symptom Analysis": {
      "main": [
        [
          {
            "node": "Risk Stratification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Risk Stratification": {
      "main": [
        [
          {
            "node": "Response Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Response Generation": {
      "main": [
        [
          {
            "node": "Memory MCP - Session Storage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory MCP - Session Storage": {
      "main": [
        [
          {
            "node": "Final Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "error-handling-workflow"
  },
  "staticData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "healthcare-assistant-production"
  },
  "pinData": {},
  "versionId": "patient-intake-v1.0.0"
}