{
  "name": "Personal Health Assistant - Patient Context Management",
  "version": 1,
  "createdAt": "2025-01-27T00:00:00.000Z",
  "updatedAt": "2025-01-27T00:00:00.000Z",
  "active": true,
  "tags": ["healthcare", "patient-context", "memory-mcp", "personalization"],
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "patient-context",
        "authentication": "headerAuth",
        "options": {
          "rawBody": true,
          "cors": {
            "enabled": true,
            "allowedOrigins": "https://health-assistant.dextechlabs.com"
          }
        }
      },
      "id": "context-webhook",
      "name": "Context Management Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "jsCode": "const contextRequest = $json.body;\n\nconst validation = {\n  isValid: true,\n  errors: [],\n  warnings: [],\n  dataQuality: {\n    completeness: 0,\n    accuracy: 0,\n    timeliness: 0\n  },\n  classification: {\n    phi: [],\n    medicalData: [],\n    preferences: [],\n    interactions: []\n  }\n};\n\n// Required fields validation\nconst requiredFields = ['requestId', 'patientId', 'requestType'];\nfor (const field of requiredFields) {\n  if (!contextRequest[field]) {\n    validation.isValid = false;\n    validation.errors.push(`Missing required field: ${field}`);\n  }\n}\n\n// Validate patient demographics\nif (contextRequest.patientData?.demographics) {\n  const demographics = contextRequest.patientData.demographics;\n  \n  if (demographics.age && (demographics.age < 0 || demographics.age > 150)) {\n    validation.errors.push('Invalid age value');\n  } else if (demographics.age) {\n    validation.dataQuality.completeness += 20;\n    validation.classification.phi.push('age');\n  }\n  \n  if (demographics.dateOfBirth) {\n    const birthDate = new Date(demographics.dateOfBirth);\n    if (isNaN(birthDate.getTime())) {\n      validation.errors.push('Invalid date of birth format');\n    } else {\n      validation.dataQuality.accuracy += 15;\n      validation.classification.phi.push('dateOfBirth');\n    }\n  }\n  \n  if (demographics.location) {\n    validation.dataQuality.completeness += 10;\n    validation.classification.phi.push('location');\n  }\n}\n\n// Validate medical conditions\nif (contextRequest.medicalData?.conditions) {\n  contextRequest.medicalData.conditions.forEach((condition, index) => {\n    if (!condition.diagnosis) {\n      validation.errors.push(`Condition ${index + 1} missing diagnosis`);\n    } else {\n      validation.classification.medicalData.push(`condition_${condition.diagnosis}`);\n      validation.dataQuality.completeness += 5;\n    }\n    \n    if (condition.onsetDate) {\n      const onsetDate = new Date(condition.onsetDate);\n      if (isNaN(onsetDate.getTime())) {\n        validation.warnings.push(`Invalid onset date for condition: ${condition.diagnosis}`);\n      } else {\n        validation.dataQuality.timeliness += 5;\n      }\n    }\n  });\n}\n\n// Validate medications\nif (contextRequest.medicalData?.medications) {\n  contextRequest.medicalData.medications.forEach((medication, index) => {\n    if (!medication.name) {\n      validation.errors.push(`Medication ${index + 1} missing name`);\n    } else {\n      validation.classification.medicalData.push(`medication_${medication.name}`);\n      validation.dataQuality.completeness += 5;\n    }\n    \n    if (medication.dosage && medication.frequency) {\n      validation.dataQuality.accuracy += 5;\n    }\n  });\n}\n\n// Validate allergies\nif (contextRequest.medicalData?.allergies) {\n  contextRequest.medicalData.allergies.forEach((allergy, index) => {\n    if (!allergy.allergen) {\n      validation.errors.push(`Allergy ${index + 1} missing allergen`);\n    } else {\n      validation.classification.medicalData.push(`allergy_${allergy.allergen}`);\n      validation.dataQuality.completeness += 3;\n    }\n  });\n}\n\n// Validate interaction history\nif (contextRequest.interactionHistory?.currentSession) {\n  const session = contextRequest.interactionHistory.currentSession;\n  if (session.chiefComplaint) {\n    validation.classification.interactions.push('current_session');\n    validation.dataQuality.timeliness += 10;\n  }\n}\n\n// Calculate overall data quality scores\nconst maxCompleteness = 100;\nconst maxAccuracy = 100;\nconst maxTimeliness = 100;\n\nvalidation.dataQuality.completeness = Math.min(validation.dataQuality.completeness, maxCompleteness);\nvalidation.dataQuality.accuracy = Math.min(validation.dataQuality.accuracy, maxAccuracy);\nvalidation.dataQuality.timeliness = Math.min(validation.dataQuality.timeliness, maxTimeliness);\n\n// Data sanitization\nconst sanitizedData = {\n  ...contextRequest,\n  processedAt: new Date().toISOString(),\n  dataFingerprint: `${contextRequest.patientId}_${Date.now()}`\n};\n\n// Remove any potential XSS or injection attempts\nconst sanitizeText = (text) => {\n  if (typeof text === 'string') {\n    return text.trim().replace(/[<>\"']/g, '').substring(0, 1000);\n  }\n  return text;\n};\n\n// Sanitize text fields recursively\nconst sanitizeObject = (obj) => {\n  if (Array.isArray(obj)) {\n    return obj.map(sanitizeObject);\n  } else if (obj && typeof obj === 'object') {\n    const sanitized = {};\n    for (const [key, value] of Object.entries(obj)) {\n      sanitized[key] = sanitizeObject(value);\n    }\n    return sanitized;\n  } else if (typeof obj === 'string') {\n    return sanitizeText(obj);\n  }\n  return obj;\n};\n\nsanitizedData.medicalData = sanitizeObject(sanitizedData.medicalData);\nsanitizedData.interactionHistory = sanitizeObject(sanitizedData.interactionHistory);\n\nreturn {\n  validation,\n  contextRequest: validation.isValid ? sanitizedData : null,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "data-classification",
      "name": "Data Classification & Validation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "validation-check",
              "leftValue": "={{ $json.validation.isValid }}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "equal"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "validation-check",
      "name": "Data Validation Check",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [680, 300]
    },
    {
      "parameters": {
        "server": "memory",
        "tool": "search_nodes",
        "toolInput": {
          "query": "{{ $json.contextRequest.patientId }} patient_profile demographics identifiers"
        }
      },
      "id": "patient-identity-resolution",
      "name": "Memory MCP - Patient Identity Resolution",
      "type": "n8n-nodes-langchain.toolMcp",
      "typeVersion": 1,
      "position": [900, 180]
    },
    {
      "parameters": {
        "server": "memory",
        "tool": "open_nodes",
        "toolInput": {
          "names": [
            "{{ $json.contextRequest.patientId }}_profile",
            "{{ $json.contextRequest.patientId }}_conditions",
            "{{ $json.contextRequest.patientId }}_medications",
            "{{ $json.contextRequest.patientId }}_allergies",
            "{{ $json.contextRequest.patientId }}_interactions"
          ]
        }
      },
      "id": "historical-data-retrieval",
      "name": "Memory MCP - Historical Data Retrieval",
      "type": "n8n-nodes-langchain.toolMcp",
      "typeVersion": 1,
      "position": [900, 300]
    },
    {
      "parameters": {
        "jsCode": "const contextRequest = $json.contextRequest;\nconst existingProfile = $json.patientIdentity || {};\nconst historicalData = $json.historicalData || {};\n\nconst enrichedData = {\n  patientProfile: {\n    id: contextRequest.patientId,\n    lastUpdated: new Date().toISOString(),\n    dataQuality: $json.validation.dataQuality,\n    completeness: 0\n  },\n  medicalHistory: {\n    conditions: [],\n    medications: [],\n    allergies: [],\n    procedures: [],\n    labResults: []\n  },\n  interactions: [],\n  insights: {\n    trends: [],\n    risks: [],\n    recommendations: []\n  },\n  timeline: []\n};\n\n// Merge existing profile with new data\nif (existingProfile.results && existingProfile.results.length > 0) {\n  const existingData = existingProfile.results[0];\n  enrichedData.patientProfile.existing = true;\n  enrichedData.patientProfile.firstCreated = existingData.created || new Date().toISOString();\n} else {\n  enrichedData.patientProfile.existing = false;\n  enrichedData.patientProfile.firstCreated = new Date().toISOString();\n}\n\n// Process medical conditions\nif (contextRequest.medicalData?.conditions) {\n  contextRequest.medicalData.conditions.forEach(condition => {\n    const enrichedCondition = {\n      ...condition,\n      id: `condition_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      enteredDate: new Date().toISOString(),\n      status: condition.status || 'active'\n    };\n    \n    // Check for condition interactions or complications\n    if (condition.diagnosis.toLowerCase().includes('diabetes')) {\n      enrichedCondition.riskFactors = ['cardiovascular disease', 'kidney disease', 'neuropathy'];\n      enrichedData.insights.risks.push('Diabetes complications monitoring recommended');\n    }\n    \n    if (condition.diagnosis.toLowerCase().includes('hypertension')) {\n      enrichedCondition.riskFactors = ['stroke', 'heart attack', 'kidney disease'];\n      enrichedData.insights.risks.push('Blood pressure monitoring critical');\n    }\n    \n    enrichedData.medicalHistory.conditions.push(enrichedCondition);\n    enrichedData.timeline.push({\n      date: condition.onsetDate || new Date().toISOString(),\n      type: 'condition_onset',\n      description: `Diagnosed with ${condition.diagnosis}`,\n      severity: condition.severity\n    });\n  });\n}\n\n// Process medications\nif (contextRequest.medicalData?.medications) {\n  contextRequest.medicalData.medications.forEach(medication => {\n    const enrichedMedication = {\n      ...medication,\n      id: `medication_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      enteredDate: new Date().toISOString(),\n      status: medication.endDate ? 'discontinued' : 'active'\n    };\n    \n    // Check for drug interactions with existing medications\n    const existingMedications = enrichedData.medicalHistory.medications;\n    const interactionChecks = [];\n    \n    // Common interaction patterns\n    if (medication.name.toLowerCase().includes('warfarin')) {\n      interactionChecks.push('Monitor INR levels closely');\n      enrichedData.insights.risks.push('Warfarin requires careful monitoring and drug interaction screening');\n    }\n    \n    if (medication.name.toLowerCase().includes('insulin')) {\n      interactionChecks.push('Monitor blood glucose levels');\n      enrichedData.insights.recommendations.push('Regular glucose monitoring and carbohydrate counting essential');\n    }\n    \n    enrichedMedication.interactionChecks = interactionChecks;\n    enrichedData.medicalHistory.medications.push(enrichedMedication);\n    \n    enrichedData.timeline.push({\n      date: medication.startDate || new Date().toISOString(),\n      type: 'medication_start',\n      description: `Started ${medication.name} ${medication.dosage}`,\n      prescriber: medication.prescribingProvider\n    });\n  });\n}\n\n// Process allergies\nif (contextRequest.medicalData?.allergies) {\n  contextRequest.medicalData.allergies.forEach(allergy => {\n    const enrichedAllergy = {\n      ...allergy,\n      id: `allergy_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n      enteredDate: new Date().toISOString(),\n      crossReactivity: []\n    };\n    \n    // Check for cross-reactivity patterns\n    if (allergy.allergen.toLowerCase().includes('penicillin')) {\n      enrichedAllergy.crossReactivity = ['amoxicillin', 'ampicillin', 'cephalosporins'];\n      enrichedData.insights.risks.push('Penicillin allergy - avoid beta-lactam antibiotics');\n    }\n    \n    if (allergy.allergen.toLowerCase().includes('sulfa')) {\n      enrichedAllergy.crossReactivity = ['sulfamethoxazole', 'sulfadiazine'];\n      enrichedData.insights.risks.push('Sulfa allergy - screen sulfonamide medications');\n    }\n    \n    enrichedData.medicalHistory.allergies.push(enrichedAllergy);\n    \n    enrichedData.timeline.push({\n      date: allergy.onsetDate || new Date().toISOString(),\n      type: 'allergy_identified',\n      description: `Allergy to ${allergy.allergen} identified`,\n      severity: allergy.severity\n    });\n  });\n}\n\n// Process current interaction\nif (contextRequest.interactionHistory?.currentSession) {\n  const session = contextRequest.interactionHistory.currentSession;\n  const enrichedInteraction = {\n    ...session,\n    id: `interaction_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    timestamp: new Date().toISOString(),\n    context: {\n      relatedConditions: [],\n      medicationRelevance: [],\n      allergyConsiderations: []\n    }\n  };\n  \n  // Analyze interaction context\n  if (session.symptoms) {\n    session.symptoms.forEach(symptom => {\n      // Check symptom relevance to existing conditions\n      enrichedData.medicalHistory.conditions.forEach(condition => {\n        if (symptom.toLowerCase().includes(condition.diagnosis.split(' ')[0].toLowerCase())) {\n          enrichedInteraction.context.relatedConditions.push(condition.diagnosis);\n        }\n      });\n    });\n  }\n  \n  enrichedData.interactions.push(enrichedInteraction);\n}\n\n// Generate insights and trends\nenrichedData.insights.trends = [\n  `Patient has ${enrichedData.medicalHistory.conditions.length} active conditions`,\n  `Currently on ${enrichedData.medicalHistory.medications.filter(m => m.status === 'active').length} medications`,\n  `${enrichedData.medicalHistory.allergies.length} known allergies documented`\n];\n\n// Calculate completeness score\nlet completenessScore = 0;\nif (contextRequest.patientData?.demographics) completenessScore += 20;\nif (enrichedData.medicalHistory.conditions.length > 0) completenessScore += 25;\nif (enrichedData.medicalHistory.medications.length > 0) completenessScore += 25;\nif (enrichedData.medicalHistory.allergies.length > 0) completenessScore += 15;\nif (enrichedData.interactions.length > 0) completenessScore += 15;\n\nenrichedData.patientProfile.completeness = completenessScore;\n\n// Sort timeline chronologically\nenrichedData.timeline.sort((a, b) => new Date(a.date) - new Date(b.date));\n\nreturn {\n  ...contextRequest,\n  enrichedPatientData: enrichedData,\n  processingComplete: true\n};"
      },
      "id": "data-processing",
      "name": "Data Processing & Enrichment",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300]
    },
    {
      "parameters": {
        "server": "sequential-thinking",
        "tool": "sequentialthinking",
        "toolInput": {
          "thought": "Analyzing comprehensive patient context for {{ $json.contextRequest.patientId }}. Patient profile completeness: {{ $json.enrichedPatientData.patientProfile.completeness }}%. Active conditions: {{ $json.enrichedPatientData.medicalHistory.conditions.length }}. Active medications: {{ $json.enrichedPatientData.medicalHistory.medications.filter(m => m.status === 'active').length }}. Known allergies: {{ $json.enrichedPatientData.medicalHistory.allergies.length }}. Need to identify care patterns, potential risks, drug interactions, and personalized care opportunities.",
          "thoughtNumber": 1,
          "totalThoughts": 4,
          "nextThoughtNeeded": true
        }
      },
      "id": "context-synthesis",
      "name": "Sequential Thinking - Context Synthesis",
      "type": "n8n-nodes-langchain.toolMcp",
      "typeVersion": 1,
      "position": [1340, 300]
    },
    {
      "parameters": {
        "server": "memory",
        "tool": "create_entities",
        "toolInput": {
          "entities": [
            {
              "name": "{{ $json.contextRequest.patientId }}_profile_updated",
              "entityType": "patient_profile",
              "observations": [
                "Patient ID: {{ $json.contextRequest.patientId }}",
                "Age: {{ $json.contextRequest.patientData?.demographics?.age || 'unknown' }}",
                "Gender: {{ $json.contextRequest.patientData?.demographics?.gender || 'unknown' }}",
                "Profile completeness: {{ $json.enrichedPatientData.patientProfile.completeness }}%",
                "Active conditions: {{ $json.enrichedPatientData.medicalHistory.conditions.length }}",
                "Active medications: {{ $json.enrichedPatientData.medicalHistory.medications.filter(m => m.status === 'active').length }}",
                "Known allergies: {{ $json.enrichedPatientData.medicalHistory.allergies.length }}",
                "Last updated: {{ $json.enrichedPatientData.patientProfile.lastUpdated }}",
                "Timeline events: {{ $json.enrichedPatientData.timeline.length }}"
              ]
            }
          ]
        }
      },
      "id": "data-storage",
      "name": "Memory MCP - Data Storage",
      "type": "n8n-nodes-langchain.toolMcp",
      "typeVersion": 1,
      "position": [1560, 300]
    },
    {
      "parameters": {
        "server": "memory",
        "tool": "create_relations",
        "toolInput": {
          "relations": [
            {
              "from": "{{ $json.contextRequest.patientId }}_profile_updated",
              "to": "{{ $json.contextRequest.patientId }}_conditions",
              "relationType": "has_medical_conditions"
            },
            {
              "from": "{{ $json.contextRequest.patientId }}_profile_updated",
              "to": "{{ $json.contextRequest.patientId }}_medications",
              "relationType": "takes_medications"
            },
            {
              "from": "{{ $json.contextRequest.patientId }}_profile_updated",
              "to": "{{ $json.contextRequest.patientId }}_allergies",
              "relationType": "has_allergies"
            }
          ]
        }
      },
      "id": "relationship-mapping",
      "name": "Memory MCP - Relationship Mapping",
      "type": "n8n-nodes-langchain.toolMcp",
      "typeVersion": 1,
      "position": [1780, 300]
    },
    {
      "parameters": {
        "jsCode": "const enrichedData = $json.enrichedPatientData;\nconst clinicalReasoning = $json.sequentialThinking || {};\n\nconst intelligentInsights = {\n  personalizedRecommendations: [],\n  riskAssessments: [],\n  careGaps: [],\n  medicationOptimization: [],\n  preventiveCare: [],\n  followUpPriorities: []\n};\n\n// Risk assessment based on conditions\nconst conditions = enrichedData.medicalHistory.conditions;\nconst medications = enrichedData.medicalHistory.medications;\nconst allergies = enrichedData.medicalHistory.allergies;\n\n// Diabetes management insights\nconst diabetesConditions = conditions.filter(c => \n  c.diagnosis.toLowerCase().includes('diabetes')\n);\nif (diabetesConditions.length > 0) {\n  intelligentInsights.personalizedRecommendations.push({\n    category: 'Diabetes Management',\n    priority: 'high',\n    recommendations: [\n      'Regular HbA1c monitoring every 3-6 months',\n      'Annual eye examination for diabetic retinopathy',\n      'Foot care assessment and daily inspection',\n      'Blood pressure monitoring and control'\n    ]\n  });\n  \n  intelligentInsights.riskAssessments.push({\n    risk: 'Diabetic Complications',\n    level: 'moderate_to_high',\n    factors: ['Duration of diabetes', 'Glycemic control', 'Comorbidities'],\n    monitoring: 'Regular screening for cardiovascular, renal, and ocular complications'\n  });\n}\n\n// Hypertension management\nconst hypertensionConditions = conditions.filter(c => \n  c.diagnosis.toLowerCase().includes('hypertension')\n);\nif (hypertensionConditions.length > 0) {\n  intelligentInsights.personalizedRecommendations.push({\n    category: 'Hypertension Management',\n    priority: 'high',\n    recommendations: [\n      'Home blood pressure monitoring',\n      'DASH diet implementation',\n      'Regular cardiovascular exercise',\n      'Sodium intake reduction'\n    ]\n  });\n}\n\n// Medication optimization\nif (medications.length > 5) {\n  intelligentInsights.medicationOptimization.push({\n    issue: 'Polypharmacy Risk',\n    priority: 'medium',\n    recommendations: [\n      'Comprehensive medication review with pharmacist',\n      'Drug interaction screening',\n      'Consider deprescribing inappropriate medications',\n      'Medication adherence assessment'\n    ]\n  });\n}\n\n// Allergy considerations\nif (allergies.length > 0) {\n  intelligentInsights.riskAssessments.push({\n    risk: 'Adverse Drug Reactions',\n    level: 'medium',\n    factors: allergies.map(a => a.allergen),\n    monitoring: 'Always verify allergy status before prescribing new medications'\n  });\n}\n\n// Age-based preventive care\nconst age = $json.contextRequest.patientData?.demographics?.age;\nif (age) {\n  if (age >= 50) {\n    intelligentInsights.preventiveCare.push({\n      category: 'Cancer Screening',\n      priority: 'medium',\n      recommendations: [\n        'Colorectal cancer screening (colonoscopy or FIT)',\n        'Mammography (if applicable)',\n        'Lung cancer screening (if smoking history)'\n      ]\n    });\n  }\n  \n  if (age >= 65) {\n    intelligentInsights.preventiveCare.push({\n      category: 'Geriatric Care',\n      priority: 'medium',\n      recommendations: [\n        'Annual influenza vaccination',\n        'Pneumococcal vaccination',\n        'Fall risk assessment',\n        'Cognitive screening',\n        'Osteoporosis screening'\n      ]\n    });\n  }\n}\n\n// Care gaps identification\nlet careGaps = [];\nif (!medications.some(m => m.name.toLowerCase().includes('statin')) && \n    conditions.some(c => c.diagnosis.toLowerCase().includes('diabetes'))) {\n  careGaps.push('Consider statin therapy for cardiovascular protection in diabetes');\n}\n\nif (!medications.some(m => m.name.toLowerCase().includes('ace') || m.name.toLowerCase().includes('arb')) && \n    conditions.some(c => c.diagnosis.toLowerCase().includes('hypertension'))) {\n  careGaps.push('Consider ACE inhibitor or ARB for hypertension management');\n}\n\nintelligentInsights.careGaps = careGaps;\n\n// Follow-up priorities\nintelligentInsights.followUpPriorities = [\n  {\n    priority: 'high',\n    item: 'Medication adherence assessment',\n    timeframe: '1-2 weeks'\n  },\n  {\n    priority: 'medium',\n    item: 'Vital signs monitoring',\n    timeframe: '1 month'\n  },\n  {\n    priority: 'low',\n    item: 'Preventive care review',\n    timeframe: '3-6 months'\n  }\n];\n\nreturn {\n  ...enrichedData,\n  intelligentInsights,\n  contextComplete: true,\n  generatedAt: new Date().toISOString()\n};"
      },
      "id": "insights-generation",
      "name": "Intelligent Insights Generation",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [2000, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": true,\n  \"requestId\": \"{{ $json.contextRequest.requestId }}\",\n  \"patientId\": \"{{ $json.contextRequest.patientId }}\",\n  \"contextProcessed\": true,\n  \n  \"patientProfile\": {\n    \"completeness\": \"{{ $json.enrichedPatientData.patientProfile.completeness }}%\",\n    \"lastUpdated\": \"{{ $json.enrichedPatientData.patientProfile.lastUpdated }}\",\n    \"dataQuality\": {{ JSON.stringify($json.validation.dataQuality) }}\n  },\n  \n  \"medicalSummary\": {\n    \"activeConditions\": {{ $json.enrichedPatientData.medicalHistory.conditions.length }},\n    \"activeMedications\": {{ $json.enrichedPatientData.medicalHistory.medications.filter(m => m.status === 'active').length }},\n    \"knownAllergies\": {{ $json.enrichedPatientData.medicalHistory.allergies.length }},\n    \"timelineEvents\": {{ $json.enrichedPatientData.timeline.length }}\n  },\n  \n  \"personalizedInsights\": {\n    \"recommendations\": {{ JSON.stringify($json.intelligentInsights.personalizedRecommendations) }},\n    \"riskAssessments\": {{ JSON.stringify($json.intelligentInsights.riskAssessments) }},\n    \"careGaps\": {{ JSON.stringify($json.intelligentInsights.careGaps) }},\n    \"preventiveCare\": {{ JSON.stringify($json.intelligentInsights.preventiveCare) }}\n  },\n  \n  \"actionItems\": {\n    \"followUpPriorities\": {{ JSON.stringify($json.intelligentInsights.followUpPriorities) }},\n    \"medicationOptimization\": {{ JSON.stringify($json.intelligentInsights.medicationOptimization) }}\n  },\n  \n  \"contextMetadata\": {\n    \"processingTime\": \"calculated_in_seconds\",\n    \"dataClassification\": {{ JSON.stringify($json.validation.classification) }},\n    \"generatedAt\": \"{{ $json.generatedAt }}\"\n  }\n}",
        "responseCode": 200
      },
      "id": "context-response",
      "name": "Context Response & Recommendations",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [2220, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "{\n  \"success\": false,\n  \"error\": \"Context data validation failed\",\n  \"details\": {{ JSON.stringify($json.validation.errors) }},\n  \"warnings\": {{ JSON.stringify($json.validation.warnings) }},\n  \"timestamp\": \"{{ $json.timestamp }}\"\n}",
        "responseCode": 400
      },
      "id": "validation-error-response",
      "name": "Context Validation Error Response",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [680, 480]
    }
  ],
  "connections": {
    "Context Management Webhook": {
      "main": [
        [
          {
            "node": "Data Classification & Validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Classification & Validation": {
      "main": [
        [
          {
            "node": "Data Validation Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Validation Check": {
      "main": [
        [
          {
            "node": "Memory MCP - Patient Identity Resolution",
            "type": "main",
            "index": 0
          },
          {
            "node": "Memory MCP - Historical Data Retrieval",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Context Validation Error Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory MCP - Patient Identity Resolution": {
      "main": [
        [
          {
            "node": "Data Processing & Enrichment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory MCP - Historical Data Retrieval": {
      "main": [
        [
          {
            "node": "Data Processing & Enrichment",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Processing & Enrichment": {
      "main": [
        [
          {
            "node": "Sequential Thinking - Context Synthesis",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Sequential Thinking - Context Synthesis": {
      "main": [
        [
          {
            "node": "Memory MCP - Data Storage",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory MCP - Data Storage": {
      "main": [
        [
          {
            "node": "Memory MCP - Relationship Mapping",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Memory MCP - Relationship Mapping": {
      "main": [
        [
          {
            "node": "Intelligent Insights Generation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Intelligent Insights Generation": {
      "main": [
        [
          {
            "node": "Context Response & Recommendations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": "error-handling-workflow"
  },
  "staticData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "healthcare-assistant-production"
  },
  "pinData": {},
  "versionId": "patient-context-v1.0.0"
}